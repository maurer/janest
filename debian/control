Source: janest
Section: ocaml
Priority: optional
Maintainer: Debian OCaml Maintainers <debian-ocaml-maint@lists.debian.org>
Uploaders:
 Mehdi Dogguy <mehdi@debian.org>,
 St√©phane Glondu <glondu@debian.org>,
 Lifeng Sun <lifongsun@gmail.com>
Build-Depends:
 debhelper (>= 9),
 bc,
 rsync,
 dh-ocaml (>= 0.9~),
 ocaml-nox (>= 4.00.1),
 ocaml-findlib (>= 1.4),
 camlp4,
 camlp4-extra,
 libres-ocaml-dev (>= 4.0.2),
 libpcre-ocaml-dev,
 libounit-ocaml-dev,
Standards-Version: 3.9.5
Vcs-Browser: http://anonscm.debian.org/gitweb/?p=pkg-ocaml-maint/packages/janest-core.git
Vcs-Git: git://anonscm.debian.org/pkg-ocaml-maint/packages/janest-core.git
Homepage: http://janestreet.github.io/

Package: libtype-conv-camlp4-dev
Architecture: any
Depends:
 ocaml-findlib,
 ${ocaml:Depends},
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: support library for OCaml preprocessor type conversions
 The type-conv library factors out functionality needed by different
 CamlP4 extensions that generate code from type specifications.
 .
 CamlP4 extensions adding support for some trailing "with foo" (e.g.
 "with sexplib" provided by sexplib, and "with bin_io" provided by
 bin-prot) after type declaration can rely on type-conv.

Package: libbin-prot-camlp4-dev
Architecture: any
Depends:
 ${ocaml:Depends},
 ocaml-findlib,
 camlp4,
 libtype-conv-camlp4-dev,
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: type-safe binary serialization for OCaml values
 bin-prot provides functionalities for reading and writing OCaml-values
 in a type-safe binary protocol.
 .
 These functions provide a safe way of performing I/O on any
 extensionally defined data type. Functions, objects, and values whose
 type is bound through a polymorphic record field are not supported, but
 everything else is.
 .
 There is no support for cyclic or shared values and only little endian
 computer architectures are supported.

Package: libsexplib-camlp4-dev
Provides:
 libsexplib-ocaml-dev,
 ${ocaml:Provides}
Architecture: any
Depends:
 ocaml-findlib,
 camlp4,
 ${ocaml:Depends},
 ${shlibs:Depends},
 ${misc:Depends}
Description: automated conversions between OCaml-values and S-expressions
 Sexplib library contains functionality for parsing and pretty-printing
 S-expressions.
 .
 Sexplib also contains a preprocessing module for Camlp4, which can be
 used to automatically generate code from type definitions for
 efficiently converting OCaml-values to S-expressions and vice versa.
 In combination with the parsing and pretty-printing functionality this
 frees users from having to write their own I/O-routines for the
 datastructures they define.  Possible errors during automatic
 conversions from S-expressions to OCaml-values are reported in a very
 human-readable way.
 .
 Another module contained in Sexplib you to extract and replace
 sub-expressions in S-expressions.

Package: libfields-camlp4-dev
Architecture: any
Depends:
 ocaml-findlib,
 camlp4,
 ${ocaml:Depends},
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: OCaml syntax extension that enables folding over record fields
 fieldslib is an OCaml syntax extension that can be used to define
 first class values representing record fields. On top of those
 values additional routines can then be automatically defined to:
 .
  - get and set record fields
  - iterate and fold over fields
  - create new record values
 .
 fieldslib is built on top of CamlP4.

Package: libenumerate-camlp4-dev
Architecture: any
Depends:
 ${ocaml:Depends},
 ocaml-findlib,
 camlp4,
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: OCaml syntax extension for enumerate
 TODO

Package: libtyperep-ocaml-dev
Architecture: any
Depends:
 ${ocaml:Depends},
 ocaml-findlib,
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: typerep
 typerep

Package: libcompare-camlp4-dev
Architecture: any
Depends:
 ${ocaml:Depends},
 ocaml-findlib,
 camlp4,
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: OCaml syntax extension for deriving compare functions automatically
 comparelib is a camlp4 syntax extension that derives comparison functions from
 type representations. The scaffolded functions are usually much faster than
 ocaml's Pervasives.compare. Scaffolding functions also gives you more
 flexibilty by allowing you to override them for a specific type and more
 safety by making sure that you only compare comparable values.
 .
 comparelib is built on top of CamlP4.

Package: libhere-camlp4-dev
Architecture: any
Depends:
 ${ocaml:Depends},
 ocaml-findlib,
 camlp4,
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: OCaml syntax extension for inserting the current location
 herelib is an OCaml syntax extension that can be used to inserte the
 current location of the source file.
 .
 herelib is built on top of CamlP4.

Package: libpa-ounit-camlp4-dev
Architecture: any
Depends:
 ${ocaml:Depends},
 ocaml-findlib,
 camlp4,
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: OCaml syntax extension for writing inline unit tests
 pa-ounit is an OCaml syntax extension that can be used to write inline
 testing.
 .
 pa-ounit is built on top of CamlP4.

Package: libpa-bench-camlp4-dev
Architecture: any
Depends:
 ${ocaml:Depends},
 ocaml-findlib,
 camlp4,
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: OCaml syntax extension for writing inline benchmark
 pa-bench is an OCaml syntax extension that can be used to write inline
 benchmark.
 .
 pa-bench is built on top of CamlP4.

Package: libpipebang-camlp4-dev
Architecture: any
Depends:
 ${ocaml:Depends},
 ocaml-findlib,
 camlp4,
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: OCaml syntax extension to transform x|! f into f x
 pipebang is an OCaml syntax extension that can be used to
 transform x|! f into f x.
 .
 pipebang is built on top of CamlP4.

Package: libvariants-camlp4-dev
Architecture: any
Depends:
 ${ocaml:Depends},
 ocaml-findlib,
 camlp4,
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: OCaml syntax extension to support variants as first class values
 variantslib is an OCaml syntax extension that can be used to define first
 class values representing variants. On top of those variants additional
 routines can then be automatically defined to:
 .
  - create new variants values
  - iterate, fold and map over variants
 .
 variantslib is built on top of CamlP4.

Package: libpa-test-camlp4-dev
Architecture: any
Depends:
 ${ocaml:Depends},
 ocaml-findlib,
 camlp4,
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: OCaml syntax extension for writing inline tests
 pa-test

Package: libcore-kernel-ocaml-dev
Architecture: any
Depends:
 ${ocaml:Depends},
 ocaml-findlib,
 camlp4,
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: Jane Street's standard library for OCaml - kernel
 Core is an alternative to the OCaml standard library developed by
 Jane Street Capital.
 .
 Core does a number of things:
 .
  * provides tail recursive versions of non tail recursive functions in
    the standard library;
  * changes the signature of many of the standard modules to enforce
    consistent naming conventions;
  * includes generic serialization for most types;
  * adds some new modules as well as new functionality to existing
    modules.
 .
 Beware that Core extends some functionality of the legacy standard
 library, and outright changes or replaces other; backward compatibility
 with the legacy standard library has not to be expected.
 .
 The code of Core is routinely reviewed within Jane Street Capital
 according to their quality assurance requirements.
 .
 Core-kernel is the system-independent part of Core.  It is aimed for
 cases when the full Core is not available, such as in Javascript.
 .
 This package contains the development stuff you need to use Core-kernel
 in your programs.

Package: libcore-kernel-ocaml
Architecture: any
Depends:
 ocaml-findlib,
 ${ocaml:Depends},
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: Jane Street's standard library for OCaml - kernel (runtime)
 Core is an alternative to the OCaml standard library developed by
 Jane Street Capital.
 .
 Core does a number of things:
 .
  * provides tail recursive versions of non tail recursive functions in
    the standard library;
  * changes the signature of many of the standard modules to enforce
    consistent naming conventions;
  * includes generic serialization for most types;
  * adds some new modules as well as new functionality to existing
    modules.
 .
 Beware that Core extends some functionality of the legacy standard
 library, and outright changes or replaces other; backward compatibility
 with the legacy standard library has not to be expected.
 .
 The code of Core is routinely reviewed within Jane Street Capital
 according to their quality assurance requirements.
 .
 Core-kernel is the system-independent part of Core.  It is aimed for
 cases when the full Core is not available, such as in Javascript.
 .
 This package contains the runtime stuff you need to run programs using
 Core-kernel.

Package: libcore-ocaml-dev
Architecture: any
Depends:
 ocaml-findlib,
 ${ocaml:Depends},
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: Jane Street's standard library for OCaml
 Core is an alternative to the OCaml standard library developed by
 Jane Street Capital.
 .
 Core does a number of things:
 .
  * provides tail recursive versions of non tail recursive functions in
    the standard library;
  * changes the signature of many of the standard modules to enforce
    consistent naming conventions;
  * includes generic serialization for most types;
  * adds some new modules as well as new functionality to existing
    modules.
 .
 Beware that Core extends some functionality of the legacy standard
 library, and outright changes or replaces other; backward compatibility
 with the legacy standard library has not to be expected.
 .
 The code of Core is routinely reviewed within Jane Street Capital
 according to their quality assurance requirements.
 .
 This package contains the development stuff you need to use Core in
 your programs.

Package: libcore-ocaml
Architecture: any
Depends:
 ocaml-findlib,
 ${ocaml:Depends},
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: Jane Street's standard library for OCaml (runtime)
 Core is an alternative to the OCaml standard library developed by
 Jane Street Capital.
 .
 Core does a number of things:
 .
  * provides tail recursive versions of non tail recursive functions in
    the standard library;
  * changes the signature of many of the standard modules to enforce
    consistent naming conventions;
  * includes generic serialization for most types;
  * adds some new modules as well as new functionality to existing
    modules.
 .
 Beware that Core extends some functionality of the legacy standard
 library, and outright changes or replaces other; backward compatibility
 .
 The code of Core is routinely reviewed within Jane Street Capital
 according to their quality assurance requirements.
 .
 This package contains the runtime stuff you need to run programs using
 Core.

Package: libcustom-printf-camlp4-dev
Architecture: any
Depends:
 ${ocaml:Depends},
 ocaml-findlib,
 camlp4,
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: OCaml syntax extension for printf format strings
 custom-printf is an OCaml syntax extension that can be used to printf
 format strings.
 .
 custom-printf is built on top of CamlP4.

Package: libasync-kernel-ocaml-dev
Architecture: any
Depends:
 ocaml-findlib,
 ${ocaml:Depends},
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: Asynchronous programming library for OCaml (kernel)
 Async uses non-preemptive user-level threads and first-class blocking
 operations with blocking expressed in the type system to implement
 asynchronous programming. The benefits of the approach are:
 .
  * Non-preemptive threading is simpler to reason about than pre-emptive
    threading. For the bulk of one's program, one doesn't have to think
    about race conditions, mutexes, etc. One can also use existing
    non-thread-safe code without worries.
  * User level threads are much cheaper than threads provided by the
    operating system, both in creation and context switching.
  * Users can control the scheduler for threads, which makes it possible
    to do a better job for the application at hand.
  * Writing low latency applications is easier -- it's harder to have an
    application block indefinitely by mistake.
 .
 This package provides kernel component of Async.

Package: libasync-unix-ocaml-dev
Architecture: any
Depends:
 ocaml-findlib,
 ${ocaml:Depends},
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: Asynchronous programming library for OCaml (unix)
 Async uses non-preemptive user-level threads and first-class blocking
 operations with blocking expressed in the type system to implement
 asynchronous programming. The benefits of the approach are:
 .
  * Non-preemptive threading is simpler to reason about than pre-emptive
    threading. For the bulk of one's program, one doesn't have to think
    about race conditions, mutexes, etc. One can also use existing
    non-thread-safe code without worries.
  * User level threads are much cheaper than threads provided by the
    operating system, both in creation and context switching.
  * Users can control the scheduler for threads, which makes it possible
    to do a better job for the application at hand.
  * Writing low latency applications is easier -- it's harder to have an
    application block indefinitely by mistake.
 .
 This package provides unix component of Async.

Package: libasync-extra-ocaml-dev
Architecture: any
Depends:
 ocaml-findlib,
 ${ocaml:Depends},
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: Asynchronous programming library for OCaml (extra)
 Async uses non-preemptive user-level threads and first-class blocking
 operations with blocking expressed in the type system to implement
 asynchronous programming. The benefits of the approach are:
 .
  * Non-preemptive threading is simpler to reason about than pre-emptive
    threading. For the bulk of one's program, one doesn't have to think
    about race conditions, mutexes, etc. One can also use existing
    non-thread-safe code without worries.
  * User level threads are much cheaper than threads provided by the
    operating system, both in creation and context switching.
  * Users can control the scheduler for threads, which makes it possible
    to do a better job for the application at hand.
  * Writing low latency applications is easier -- it's harder to have an
    application block indefinitely by mistake.
 .
 This package provides extra component of Async.

Package: libasync-ocaml-dev
Architecture: any
Depends:
 ocaml-findlib,
 ${ocaml:Depends},
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: Asynchronous programming library for OCaml
 Async uses non-preemptive user-level threads and first-class blocking
 operations with blocking expressed in the type system to implement
 asynchronous programming. The benefits of the approach are:
 .
  * Non-preemptive threading is simpler to reason about than pre-emptive
    threading. For the bulk of one's program, one doesn't have to think
    about race conditions, mutexes, etc. One can also use existing
    non-thread-safe code without worries.
  * User level threads are much cheaper than threads provided by the
    operating system, both in creation and context switching.
  * Users can control the scheduler for threads, which makes it possible
    to do a better job for the application at hand.
  * Writing low latency applications is easier -- it's harder to have an
    application block indefinitely by mistake.
 .
 This package provides Async development stuffs.

Package: libtextutils-ocaml-dev
Architecture: any
Depends:
 ${ocaml:Depends},
 ocaml-findlib,
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: Text output utilities
 textutils is a OCaml library to create ASCII table and print a list
 in a columnize way.

Package: libre2-ocaml
Architecture: any
Depends:
 ${ocaml:Depends},
 ocaml-findlib,
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: Jane Street's standard library for OCaml - re2 library (runtime)
 Core is an alternative to the OCaml standard library developed by
 Jane Street Capital.
 .
 Core does a number of things:
 .
  * provides tail recursive versions of non tail recursive functions in
    the standard library;
  * changes the signature of many of the standard modules to enforce
    consistent naming conventions;
  * includes generic serialization for most types;
  * adds some new modules as well as new functionality to existing
    modules.
 .
 Beware that Core extends some functionality of the legacy standard
 library, and outright changes or replaces other; backward compatibility
 with the legacy standard library has not to be expected.
 .
 The code of Core is routinely reviewed within Jane Street Capital
 according to their quality assurance requirements.
 .
 This package contains the runtime stuff you need to run programs using
 re2 library of Core.

Package: libre2-ocaml-dev
Architecture: any
Depends:
 ${ocaml:Depends},
 ocaml-findlib,
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: Jane Street's standard library for OCaml - re2 library
 Core is an alternative to the OCaml standard library developed by
 Jane Street Capital.
 .
 Core does a number of things:
 .
  * provides tail recursive versions of non tail recursive functions in
    the standard library;
  * changes the signature of many of the standard modules to enforce
    consistent naming conventions;
  * includes generic serialization for most types;
  * adds some new modules as well as new functionality to existing
    modules.
 .
 Beware that Core extends some functionality of the legacy standard
 library, and outright changes or replaces other; backward compatibility
 with the legacy standard library has not to be expected.
 .
 The code of Core is routinely reviewed within Jane Street Capital
 according to their quality assurance requirements.
 .
 This package contains the development stuff you need to use re2
 library of Core in your programs.

Package: libcore-extended-ocaml-dev
Architecture: any
Depends:
 ${ocaml:Depends},
 ocaml-findlib,
 camlp4,
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: Jane Street's standard library for OCaml - extended
 Core is an alternative to the OCaml standard library developed by
 Jane Street Capital.
 .
 Core does a number of things:
 .
  * provides tail recursive versions of non tail recursive functions in
    the standard library;
  * changes the signature of many of the standard modules to enforce
    consistent naming conventions;
  * includes generic serialization for most types;
  * adds some new modules as well as new functionality to existing
    modules.
 .
 Beware that Core extends some functionality of the legacy standard
 library, and outright changes or replaces other; backward compatibility
 with the legacy standard library has not to be expected.
 .
 The code of Core is routinely reviewed within Jane Street Capital
 according to their quality assurance requirements.
 .
 Core-extended is a set of useful extensions to Core. These are less well
 tested and less stable than Core proper.
 .
 This package contains the development stuff you need to use Core-extended
 in your programs.

Package: libcore-extended-ocaml
Architecture: any
Depends:
 ocaml-findlib,
 ${ocaml:Depends},
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: Jane Street's standard library for OCaml - extended (runtime)
 Core is an alternative to the OCaml standard library developed by
 Jane Street Capital.
 .
 Core does a number of things:
 .
  * provides tail recursive versions of non tail recursive functions in
    the standard library;
  * changes the signature of many of the standard modules to enforce
    consistent naming conventions;
  * includes generic serialization for most types;
  * adds some new modules as well as new functionality to existing
    modules.
 .
 Beware that Core extends some functionality of the legacy standard
 library, and outright changes or replaces other; backward compatibility
 with the legacy standard library has not to be expected.
 .
 The code of Core is routinely reviewed within Jane Street Capital
 according to their quality assurance requirements.
 .
 Core-extended is a set of useful extensions to Core. These are less well
 tested and less stable than Core proper.
 .
 This package contains the runtime stuff you need to run programs using
 Core-extended.

Package: libcore-bench-ocaml
Architecture: any
Depends:
 ${ocaml:Depends},
 ocaml-findlib,
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: Jane Street's standard library for OCaml - benchmark library (runtime)
 Core is an alternative to the OCaml standard library developed by
 Jane Street Capital.
 .
 Core does a number of things:
 .
  * provides tail recursive versions of non tail recursive functions in
    the standard library;
  * changes the signature of many of the standard modules to enforce
    consistent naming conventions;
  * includes generic serialization for most types;
  * adds some new modules as well as new functionality to existing
    modules.
 .
 Beware that Core extends some functionality of the legacy standard
 library, and outright changes or replaces other; backward compatibility
 with the legacy standard library has not to be expected.
 .
 The code of Core is routinely reviewed within Jane Street Capital
 according to their quality assurance requirements.
 .
 This package contains the runtime stuff you need to run programs using
 benchmark library of Core.

Package: libcore-bench-ocaml-dev
Architecture: any
Depends:
 ${ocaml:Depends},
 ocaml-findlib,
 ${shlibs:Depends},
 ${misc:Depends}
Provides: ${ocaml:Provides}
Description: Jane Street's standard library for OCaml - benchmark library
 Core is an alternative to the OCaml standard library developed by
 Jane Street Capital.
 .
 Core does a number of things:
 .
  * provides tail recursive versions of non tail recursive functions in
    the standard library;
  * changes the signature of many of the standard modules to enforce
    consistent naming conventions;
  * includes generic serialization for most types;
  * adds some new modules as well as new functionality to existing
    modules.
 .
 Beware that Core extends some functionality of the legacy standard
 library, and outright changes or replaces other; backward compatibility
 with the legacy standard library has not to be expected.
 .
 The code of Core is routinely reviewed within Jane Street Capital
 according to their quality assurance requirements.
 .
 This package contains the development stuff you need to use benchmark
 library of Core in your programs.


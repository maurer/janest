# Make sure we use the right channel representation (new with OCaml 3.10!)
match $(OCAML_VERSION)
case ^3\.0.*
default
  CFLAGS += -DCHANNEL_HAS_FLAGS
  export CFLAGS

LIB_CNAMES = \
  misc ocaml_utils_stubs unix_ext_stubs \
  bigstring_stubs ml_backtrace

LIB_MLNAMES = \
  OUnit_utils \
  backtrace \
  bag \
  bigbuffer \
  bigstring \
  binable \
  binary_packing \
  bool \
  bucket \
  caml \
  common \
  comparable \
  container \
  core_arg \
  core_array \
  core_char \
  core_filename \
  core_gc \
  core_hashtbl \
  core_int \
  core_int32 \
  core_int64 \
  core_list \
  core_mutex \
  core_nativeint \
  core_printf \
  core_queue \
  core_stack \
  core_string \
  core_sys \
  unix_ext \
  core_unix \
  crc \
  dequeue \
  doubly_linked \
  error_check \
  exn \
  fast_hashtbl \
  float \
  floatable \
  force_once \
  fqueue \
  hash_queue \
  hash_set \
  hashable \
  heap \
  in_channel \
  int_conversions \
  int_intf \
  interfaces \
  interned \
  interval \
  interval_set \
  linebuf \
  memo \
  monad \
  option \
  ordered_collection_common \
  out_channel \
  pMap \
  pSet \
  piecewise_linear \
  pretty_printer \
  quickcheck \
  ref \
  result \
  robustly_comparable \
  setable \
  sexpable \
  space_safe_tuple \
  squeue \
  std \
  std_internal \
  stringable \
  thread_safe_queue \
  time \
  timer \
  tuple \
  unique_id \
  word_size \
  size \
  core_sexp \
  month \

OCamlMakePPDeps($(PA_SEXP_BIN), \
  bucket \
  common \
  dequeue \
  fast_hashtbl \
  float \
  input \
  interval \
  interval_set \
  core_array \
  core_char \
  core_int \
  core_int32 \
  core_int64 \
  core_list \
  core_nativeint \
  core_stack \
  core_string \
  core_unix \
  option \
  OUnit_utils \
  piecewise_linear \
  time \
  pMap \
  result \
  std_internal \
  core_sexp \
  month \
)

switch $(string $(shell uname -s))
case Darwin
  DARWIN = true
  CFLAGS = -pipe -g -fPIC -DPIC -O0 -Wall -pedantic -Wextra \
		  -Wunused -Wno-long-long -DCAML_NAME_SPACE -O2 -fomit-frame-pointer
  export
case Linux
  LINUX = true
  LIB_CNAMES += linux_ext_stubs
  LIB_MLNAMES += linux_ext
  OCamlPreprocess(./pp.sh, linux_ext)
  OCAML_LIB_FLAGS += -cclib -lrt
  export
default
  eprintln(unknown os from uname -s.  exiting)
	exit(1)

switch $(PROCESSOR)
case x86_64
  ARCH_FLAGS = -DARCH_SIXTYFOUR
  export ARCH_FLAGS
default
  ARCH_FLAGS =
  export ARCH_FLAGS

OCamlPreprocess(./pp.sh, std unix_ext bigstring )

OCamlMakeLibPackage (core)

doc:
	ocamldoc -html -pp 'camlp4o -I ../../../lib pa_type_conv.cmo pa_sexp_conv.cmo pa_bin_prot.cmo' *.ml *.mli -d /var/www/html/docs/core

InstantiateOCamlEnv()

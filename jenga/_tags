# OASIS_START
# DO NOT EDIT (digest: 671946ec8a88ffcc3d00a4f0c70f4850)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library tenacious_sample_lib
"tenacious/sample-lib/tenacious_sample_lib.cmxs": use_tenacious_sample_lib
"tenacious/sample-lib/heart.cmx": for-pack(Tenacious_sample_lib)
"tenacious/sample-lib/tenacious_sample.cmx": for-pack(Tenacious_sample_lib)
<tenacious/sample-lib/*.ml{,i}>: package(async)
<tenacious/sample-lib/*.ml{,i}>: package(core)
<tenacious/sample-lib/*.ml{,i}>: package(threads)
<tenacious/sample-lib/*.ml{,i}>: package(type_conv)
# Library tenacious_lifetime_lib
"tenacious/lifetime-lib/tenacious_lifetime_lib.cmxs": use_tenacious_lifetime_lib
"tenacious/lifetime-lib/ten.cmx": for-pack(Tenacious_lifetime_lib)
<tenacious/lifetime-lib/*.ml{,i}>: package(async)
<tenacious/lifetime-lib/*.ml{,i}>: package(core)
<tenacious/lifetime-lib/*.ml{,i}>: package(threads)
# Library tenacious_lib
"tenacious/lib/tenacious_lib.cmxs": use_tenacious_lib
<tenacious/lib/*.ml{,i}>: package(async)
<tenacious/lib/*.ml{,i}>: package(core)
<tenacious/lib/*.ml{,i}>: package(sexplib)
<tenacious/lib/*.ml{,i}>: package(sexplib.syntax)
<tenacious/lib/*.ml{,i}>: package(threads)
<tenacious/lib/*.ml{,i}>: package(type_conv)
<tenacious/lib/*.ml{,i}>: use_tenacious_lifetime_lib
<tenacious/lib/*.ml{,i}>: use_tenacious_sample_lib
# Library jenga_lib
"lib/jenga_lib.cmxs": use_jenga_lib
"lib/api.cmx": for-pack(Jenga_lib)
"lib/api_v2.cmx": for-pack(Jenga_lib)
"lib/api_v3.cmx": for-pack(Jenga_lib)
"lib/build.cmx": for-pack(Jenga_lib)
"lib/command_line.cmx": for-pack(Jenga_lib)
"lib/config.cmx": for-pack(Jenga_lib)
"lib/description.cmx": for-pack(Jenga_lib)
"lib/discovered_graph.cmx": for-pack(Jenga_lib)
"lib/effort.cmx": for-pack(Jenga_lib)
"lib/error_reason_type.cmx": for-pack(Jenga_lib)
"lib/exit_code.cmx": for-pack(Jenga_lib)
"lib/file_access.cmx": for-pack(Jenga_lib)
"lib/finish_time_estimator.cmx": for-pack(Jenga_lib)
"lib/for_user.cmx": for-pack(Jenga_lib)
"lib/forker.cmx": for-pack(Jenga_lib)
"lib/fs.cmx": for-pack(Jenga_lib)
"lib/glob_to_re.cmx": for-pack(Jenga_lib)
"lib/jem_command_line.cmx": for-pack(Jenga_lib)
"lib/jenga_root_interface.cmx": for-pack(Jenga_lib)
"lib/job.cmx": for-pack(Jenga_lib)
"lib/load_root.cmx": for-pack(Jenga_lib)
"lib/message.cmx": for-pack(Jenga_lib)
"lib/misc.cmx": for-pack(Jenga_lib)
"lib/monomorphic_mutable_graph.cmx": for-pack(Jenga_lib)
"lib/offline.cmx": for-pack(Jenga_lib)
"lib/path.cmx": for-pack(Jenga_lib)
"lib/pattern.cmx": for-pack(Jenga_lib)
"lib/persist.cmx": for-pack(Jenga_lib)
"lib/progress.cmx": for-pack(Jenga_lib)
"lib/quit.cmx": for-pack(Jenga_lib)
"lib/reason.cmx": for-pack(Jenga_lib)
"lib/rpc_intf.cmx": for-pack(Jenga_lib)
"lib/rpc_server.cmx": for-pack(Jenga_lib)
"lib/run.cmx": for-pack(Jenga_lib)
"lib/server_lock.cmx": for-pack(Jenga_lib)
"lib/system.cmx": for-pack(Jenga_lib)
<lib/*.ml{,i}>: package(async)
<lib/*.ml{,i}>: package(async_inotify)
<lib/*.ml{,i}>: package(async_parallel)
<lib/*.ml{,i}>: package(async_shell)
<lib/*.ml{,i}>: package(bin_prot)
<lib/*.ml{,i}>: package(bin_prot.syntax)
<lib/*.ml{,i}>: package(comparelib)
<lib/*.ml{,i}>: package(comparelib.syntax)
<lib/*.ml{,i}>: package(core)
<lib/*.ml{,i}>: package(core_extended)
<lib/*.ml{,i}>: package(fieldslib)
<lib/*.ml{,i}>: package(fieldslib.syntax)
<lib/*.ml{,i}>: package(ocaml_plugin)
<lib/*.ml{,i}>: package(pcre)
<lib/*.ml{,i}>: package(sexplib)
<lib/*.ml{,i}>: package(sexplib.syntax)
<lib/*.ml{,i}>: package(str)
<lib/*.ml{,i}>: package(threads)
<lib/*.ml{,i}>: package(type_conv)
<lib/*.ml{,i}>: use_tenacious_lib
<lib/*.ml{,i}>: use_tenacious_lifetime_lib
<lib/*.ml{,i}>: use_tenacious_sample_lib
# Library jenga_archive
"bin/jenga_archive.cmxs": use_jenga_archive
<bin/jenga_archive.{cma,cmxa}>: use_libjenga_archive_stubs
"bin/jenga_archive.c": package(async)
"bin/jenga_archive.c": package(async_inotify)
"bin/jenga_archive.c": package(async_parallel)
"bin/jenga_archive.c": package(async_shell)
"bin/jenga_archive.c": package(bin_prot)
"bin/jenga_archive.c": package(bin_prot.syntax)
"bin/jenga_archive.c": package(comparelib)
"bin/jenga_archive.c": package(comparelib.syntax)
"bin/jenga_archive.c": package(core)
"bin/jenga_archive.c": package(core_extended)
"bin/jenga_archive.c": package(fieldslib)
"bin/jenga_archive.c": package(fieldslib.syntax)
"bin/jenga_archive.c": package(ocaml_plugin)
"bin/jenga_archive.c": package(pcre)
"bin/jenga_archive.c": package(sexplib)
"bin/jenga_archive.c": package(sexplib.syntax)
"bin/jenga_archive.c": package(str)
"bin/jenga_archive.c": package(threads)
"bin/jenga_archive.c": package(type_conv)
"bin/jenga_archive.c": use_jenga_lib
"bin/jenga_archive.c": use_tenacious_lib
"bin/jenga_archive.c": use_tenacious_lifetime_lib
"bin/jenga_archive.c": use_tenacious_sample_lib
# Executable jenga
<bin/jenga.{native,byte}>: package(async)
<bin/jenga.{native,byte}>: package(async_inotify)
<bin/jenga.{native,byte}>: package(async_parallel)
<bin/jenga.{native,byte}>: package(async_shell)
<bin/jenga.{native,byte}>: package(bin_prot)
<bin/jenga.{native,byte}>: package(bin_prot.syntax)
<bin/jenga.{native,byte}>: package(comparelib)
<bin/jenga.{native,byte}>: package(comparelib.syntax)
<bin/jenga.{native,byte}>: package(core)
<bin/jenga.{native,byte}>: package(core_extended)
<bin/jenga.{native,byte}>: package(fieldslib)
<bin/jenga.{native,byte}>: package(fieldslib.syntax)
<bin/jenga.{native,byte}>: package(ocaml_plugin)
<bin/jenga.{native,byte}>: package(pcre)
<bin/jenga.{native,byte}>: package(sexplib)
<bin/jenga.{native,byte}>: package(sexplib.syntax)
<bin/jenga.{native,byte}>: package(str)
<bin/jenga.{native,byte}>: package(threads)
<bin/jenga.{native,byte}>: package(type_conv)
<bin/jenga.{native,byte}>: use_jenga_archive
<bin/jenga.{native,byte}>: use_jenga_lib
<bin/jenga.{native,byte}>: use_tenacious_lib
<bin/jenga.{native,byte}>: use_tenacious_lifetime_lib
<bin/jenga.{native,byte}>: use_tenacious_sample_lib
# Executable jenga-offline
<bin/jenga_offline.{native,byte}>: package(async)
<bin/jenga_offline.{native,byte}>: package(async_inotify)
<bin/jenga_offline.{native,byte}>: package(async_parallel)
<bin/jenga_offline.{native,byte}>: package(async_shell)
<bin/jenga_offline.{native,byte}>: package(bin_prot)
<bin/jenga_offline.{native,byte}>: package(bin_prot.syntax)
<bin/jenga_offline.{native,byte}>: package(comparelib)
<bin/jenga_offline.{native,byte}>: package(comparelib.syntax)
<bin/jenga_offline.{native,byte}>: package(core)
<bin/jenga_offline.{native,byte}>: package(core_extended)
<bin/jenga_offline.{native,byte}>: package(fieldslib)
<bin/jenga_offline.{native,byte}>: package(fieldslib.syntax)
<bin/jenga_offline.{native,byte}>: package(ocaml_plugin)
<bin/jenga_offline.{native,byte}>: package(pcre)
<bin/jenga_offline.{native,byte}>: package(sexplib)
<bin/jenga_offline.{native,byte}>: package(sexplib.syntax)
<bin/jenga_offline.{native,byte}>: package(str)
<bin/jenga_offline.{native,byte}>: package(threads)
<bin/jenga_offline.{native,byte}>: package(type_conv)
<bin/jenga_offline.{native,byte}>: use_jenga_archive
<bin/jenga_offline.{native,byte}>: use_jenga_lib
<bin/jenga_offline.{native,byte}>: use_tenacious_lib
<bin/jenga_offline.{native,byte}>: use_tenacious_lifetime_lib
<bin/jenga_offline.{native,byte}>: use_tenacious_sample_lib
<bin/*.ml{,i}>: use_jenga_archive
# Executable jem
<bin/jem.{native,byte}>: package(async)
<bin/jem.{native,byte}>: package(async_inotify)
<bin/jem.{native,byte}>: package(async_parallel)
<bin/jem.{native,byte}>: package(async_shell)
<bin/jem.{native,byte}>: package(bin_prot)
<bin/jem.{native,byte}>: package(bin_prot.syntax)
<bin/jem.{native,byte}>: package(comparelib)
<bin/jem.{native,byte}>: package(comparelib.syntax)
<bin/jem.{native,byte}>: package(core)
<bin/jem.{native,byte}>: package(core_extended)
<bin/jem.{native,byte}>: package(fieldslib)
<bin/jem.{native,byte}>: package(fieldslib.syntax)
<bin/jem.{native,byte}>: package(ocaml_plugin)
<bin/jem.{native,byte}>: package(ocaml_plugin.fake)
<bin/jem.{native,byte}>: package(pcre)
<bin/jem.{native,byte}>: package(sexplib)
<bin/jem.{native,byte}>: package(sexplib.syntax)
<bin/jem.{native,byte}>: package(str)
<bin/jem.{native,byte}>: package(threads)
<bin/jem.{native,byte}>: package(type_conv)
<bin/jem.{native,byte}>: use_jenga_lib
<bin/jem.{native,byte}>: use_tenacious_lib
<bin/jem.{native,byte}>: use_tenacious_lifetime_lib
<bin/jem.{native,byte}>: use_tenacious_sample_lib
<bin/*.ml{,i}>: package(async)
<bin/*.ml{,i}>: package(async_inotify)
<bin/*.ml{,i}>: package(async_parallel)
<bin/*.ml{,i}>: package(async_shell)
<bin/*.ml{,i}>: package(bin_prot)
<bin/*.ml{,i}>: package(bin_prot.syntax)
<bin/*.ml{,i}>: package(comparelib)
<bin/*.ml{,i}>: package(comparelib.syntax)
<bin/*.ml{,i}>: package(core)
<bin/*.ml{,i}>: package(core_extended)
<bin/*.ml{,i}>: package(fieldslib)
<bin/*.ml{,i}>: package(fieldslib.syntax)
<bin/*.ml{,i}>: package(ocaml_plugin)
<bin/*.ml{,i}>: package(ocaml_plugin.fake)
<bin/*.ml{,i}>: package(pcre)
<bin/*.ml{,i}>: package(sexplib)
<bin/*.ml{,i}>: package(sexplib.syntax)
<bin/*.ml{,i}>: package(str)
<bin/*.ml{,i}>: package(threads)
<bin/*.ml{,i}>: package(type_conv)
<bin/*.ml{,i}>: use_jenga_lib
<bin/*.ml{,i}>: use_tenacious_lib
<bin/*.ml{,i}>: use_tenacious_lifetime_lib
<bin/*.ml{,i}>: use_tenacious_sample_lib
# OASIS_STOP
<lib/*.ml{,i}>: syntax_camlp4o
<tenacious/lib/*.ml{,i}>: syntax_camlp4o
<tenacious/sample-lib/*.ml{,i}>: syntax_camlp4o
<**/*_standalone.native>: linkall
<**/*.native> and (not <**/*_standalone.native>): link_fake_archive
